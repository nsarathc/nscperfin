{
  
    
        "post0": {
            "title": "Clean Coding: Python's Return Statement",
            "content": "üêç The Python return Statement: Usage and Best Practices ‚Äî https://t.co/0Xd6n7TpEq#python pic.twitter.com/xiimenICVn . &mdash; Real Python (@realpython) September 25, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/26/return-statement-best-usage.html",
            "relUrl": "/python/cleancoding/2021/09/26/return-statement-best-usage.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "How can you crush it in your career, connect better with co-workers and find fulfilment in life?",
            "content": "How to crush it in your career, connect better with co-workers and find fulfilment in life.üßµ My 10 favorite tweets of the week: . &mdash; Aadit Sheth (@aaditsh) September 25, 2021",
            "url": "https://nsarathc.github.io/nscperfin/teams/2021/09/26/how-to-find-fulfillment.html",
            "relUrl": "/teams/2021/09/26/how-to-find-fulfillment.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Clean Coding: Do not use a default mutable as a default value for an argument.",
            "content": "Python Anti-Pattern: Using a Mutable Default Value as an Argument https://t.co/mp6rKOKS89 . &mdash; PyCoder‚Äôs Weekly (@pycoders) September 23, 2021 Take a look at a larger list of python coding anti-patterns. .",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/26/do-not-use-a-mutable-default-value-argument.html",
            "relUrl": "/python/cleancoding/2021/09/26/do-not-use-a-mutable-default-value-argument.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Clean Coding: What should be the general nature of inputs and outputs on a function?",
            "content": "Python Clean Code Tip:Specify the most general type for inputs and the most specific type for outputs.üëá pic.twitter.com/DUGOqygn08 . &mdash; TestDriven.io (@testdrivenio) September 21, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/26/clean-coding-specifying-input-output-types.html",
            "relUrl": "/python/cleancoding/2021/09/26/clean-coding-specifying-input-output-types.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Clean Coding: Avoid setting attributes of your objects outside of the constructor.",
            "content": "Python Clean Code Tip:Avoid setting attributes of your objects outside of the constructor. Rather implement methods that map to real-world conceptsüëá pic.twitter.com/iPjshwbGEa . &mdash; TestDriven.io (@testdrivenio) September 25, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/26/clean-coding-avoid-setting-attributes-outside-of-class.html",
            "relUrl": "/python/cleancoding/2021/09/26/clean-coding-avoid-setting-attributes-outside-of-class.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Clean Coding: Avoid using too many attributes on a single object.",
            "content": "Python Clean Code Tip:Avoid using too many attributes on a single object. Try to cluster them to improve cohesion, reduce coupling, and improve readabilityüëá pic.twitter.com/YTkwAeB658 . &mdash; TestDriven.io (@testdrivenio) September 24, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/26/avoid-using-too-many-attributes-on-a-single-object/html",
            "relUrl": "/python/cleancoding/2021/09/26/avoid-using-too-many-attributes-on-a-single-object/html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "What early business mistake will you never make again?",
            "content": "I asked several world-class founders one simple question: &quot;What early business mistake will you never make again?&quot; The result: 17 profound mistakes to avoid when building a business. Let&#39;s dive in üëá . &mdash; Alex Lieberman ‚òïÔ∏è (@businessbarista) September 25, 2021",
            "url": "https://nsarathc.github.io/nscperfin/business/2021/09/26/17-mistakes-to-avoid-when-building-business.html",
            "relUrl": "/business/2021/09/26/17-mistakes-to-avoid-when-building-business.html",
            "date": " ‚Ä¢ Sep 26, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "An Improved Version of Python's Builtin "doctest" Module",
            "content": "xdoctest: An Improved Version of Python&#39;s Builtin `doctest` Module #python https://t.co/bsQ5oaMWZi . &mdash; Real Python (@realpython) September 19, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/unittesting/2021/09/20/enhanced-doctest.html",
            "relUrl": "/python/unittesting/2021/09/20/enhanced-doctest.html",
            "date": " ‚Ä¢ Sep 20, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "A User Interface is a joke.",
            "content": "A UI is like a joke.If you have to explain it, it probably isn&#39;t that good. . &mdash; Carla Notarobot ü§ñüë©üèª‚Äçüíª (@CarlaNotarobot) August 4, 2021",
            "url": "https://nsarathc.github.io/nscperfin/userinterface/2021/09/20/a-ui-is-a-joke.html",
            "relUrl": "/userinterface/2021/09/20/a-ui-is-a-joke.html",
            "date": " ‚Ä¢ Sep 20, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "How do I handle Exceptions in Python like a Pro?",
            "content": "I used part of my weekend to write on how #python exceptions should be created and handledhttps://t.co/m7zZ96m8E4I&#39;m open to critics. Let me know if it sucks! . &mdash; Gui Latrova (@guilatrova) May 19, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/exceptionhandling/howto/2021/09/19/how-to-handle-exceptions-like-a-pro.html",
            "relUrl": "/python/exceptionhandling/howto/2021/09/19/how-to-handle-exceptions-like-a-pro.html",
            "date": " ‚Ä¢ Sep 19, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "How do I find the most common element in a list?",
            "content": "Here are two different ways to find the most common number in a #Python list: pic.twitter.com/BshralVMUh . &mdash; Mike Driscoll (@driscollis) September 17, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/howto/2021/09/19/how-to-find-most-common-element-in-list.html",
            "relUrl": "/python/howto/2021/09/19/how-to-find-most-common-element-in-list.html",
            "date": " ‚Ä¢ Sep 19, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "How do I download a file using python?",
            "content": "In case you missed this, you can download a file with #Python with 3 lines of code! pic.twitter.com/bTlnsJTB9b . &mdash; Mike Driscoll (@driscollis) September 17, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/howto/2021/09/19/how-to-download-a-file.html",
            "relUrl": "/python/howto/2021/09/19/how-to-download-a-file.html",
            "date": " ‚Ä¢ Sep 19, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "When should you have a meeting?",
            "content": "When Should You Have a Meeting? üîãIn the whole &quot;Async vs Sync&quot; feud, one of the big questions is: how do you decide when something requires a meeting ‚Äì vs it is ok to handle it async?Let&#39;s work this out and build a simple framework, starting from first principles üßµüëá . &mdash; Luca Rossi (@lucaronin) May 10, 2021",
            "url": "https://nsarathc.github.io/nscperfin/teams/2021/09/18/when-to-have-a-meeting.html",
            "relUrl": "/teams/2021/09/18/when-to-have-a-meeting.html",
            "date": " ‚Ä¢ Sep 18, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Clean Coding: Use HTTPStatus from http (Python Standard Library)",
            "content": "Python Clean Code Tip:Use HTTPStatus from http (it&#39;s inside the standard library) to avoid &quot;magic&quot; numbers for statuses inside your codeüëá pic.twitter.com/aeRF7KvvhW . &mdash; TestDriven.io (@testdrivenio) September 18, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/18/clean-coding-use-httpstatus.html",
            "relUrl": "/python/cleancoding/2021/09/18/clean-coding-use-httpstatus.html",
            "date": " ‚Ä¢ Sep 18, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Team Organization",
            "content": "When we think of team organization we often think of hierarchies, matrices and functions.One simple angle that rarely gets discussed is *time*.How long is the life of a team? How long are people going to work together?A thread üßµ . &mdash; Luca Rossi (@lucaronin) January 15, 2021",
            "url": "https://nsarathc.github.io/nscperfin/teams/2021/09/16/team-organization.html",
            "relUrl": "/teams/2021/09/16/team-organization.html",
            "date": " ‚Ä¢ Sep 16, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "Python: Lists",
            "content": "Python list methods are incredibly helpful.You can learn all of them in less than 5 minutes with this thread üêç üßµ üëáüèª . &mdash; Pratham (@PrasoonPratham) September 12, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/collections/2021/09/16/python-list-methods.html",
            "relUrl": "/python/collections/2021/09/16/python-list-methods.html",
            "date": " ‚Ä¢ Sep 16, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "Python: Command Line Application, parameter specification, add_mutually_exclusive_group",
            "content": "How to make one of 3 arguments required using #Python argparse? add_mutually_exclusive_group is your friend: pic.twitter.com/ARCB1KzuvP . &mdash; PyBites (@pybites) September 13, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/commandlineapps/2021/09/16/argparse-mutually-exclusive-groups.html",
            "relUrl": "/python/commandlineapps/2021/09/16/argparse-mutually-exclusive-groups.html",
            "date": " ‚Ä¢ Sep 16, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "pipdeptree: Python Package Dependency Tree Generator",
            "content": "Pipdeptree is a nice tool to easily see what dependencies depend on each otherhttps://t.co/0eg6LRaYDN pic.twitter.com/eFmpl8j1jJ . &mdash; PyBites (@pybites) September 14, 2021 Please refer pypi page for installation instructions and additional examples. .",
            "url": "https://nsarathc.github.io/nscperfin/python/2021/09/15/pipdeptree.html",
            "relUrl": "/python/2021/09/15/pipdeptree.html",
            "date": " ‚Ä¢ Sep 15, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "Clean Coding: Jumping in and out of a directory",
            "content": "Found a great use case for a Python contextmanager:Jump in, then out of a directory with Python.cd &quot;your_dir&quot;do something in therecd ..Can be implemented using a syntax like:with set_dir(&quot;your_dir&quot;): do_something()This works great for automation scripts: pic.twitter.com/84bYZ9FchO . &mdash; Patrick Loeber (@python_engineer) September 4, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/15/clean-coding-ctxmgr-move-around-folders.html",
            "relUrl": "/python/cleancoding/2021/09/15/clean-coding-ctxmgr-move-around-folders.html",
            "date": " ‚Ä¢ Sep 15, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "Clean Coding: Conventions & Practice",
            "content": "Clean Code in Python from @testdrivenio https://t.co/CvZpWFejZy . &mdash; Sarath (@nsarathc) September 13, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/cleancoding/2021/09/15/clean-coding-conventions-practice.html",
            "relUrl": "/python/cleancoding/2021/09/15/clean-coding-conventions-practice.html",
            "date": " ‚Ä¢ Sep 15, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "Clean Coding: Chained Comparisons as a Range Validation Tool",
            "content": "Python Clean Code Tip:Use chained comparison when you need to check whether some variable is between MIN and MAX values.üëá pic.twitter.com/zq2zK2FWGz . &mdash; TestDriven.io (@testdrivenio) September 14, 2021",
            "url": "https://nsarathc.github.io/nscperfin/python/chainedcomparisons/cleancoding/2021/09/15/chainedcomparison-for-range-validation.html",
            "relUrl": "/python/chainedcomparisons/cleancoding/2021/09/15/chainedcomparison-for-range-validation.html",
            "date": " ‚Ä¢ Sep 15, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "New Features in Python 3.8",
            "content": "Introduction . It may be noted that this document is more of an exemplified excerpt of official Python Documentation: What‚Äôs New In Python 3.8. . You are recommended to take a look at the Official Documentation with a view to take full advantage of new features of Python 3.8. . Features . 1. Assignment Expressions (to simplify code constructs) . Assignment Expression and Walrus Operator | Provide for easier-looking code in certain situation (while loop conditions, efficient list/dictionary/set comprehensions) | Please see Python Standard Library for examples from Python 3.8 standard library | . 2. Positional-Only &amp; Keyword-Only Function Arguments . Rules . Division operator in function signature / - arguments to the left side of the operator are enforced as positional-only | Multiplication operator in function signature * - arguments to the right side of the operator are enforced as keyword-only | You can intersperse positional or keyword arguments between / and * in the function signature. | . | Examples . # A &#39;normal&#39; function signature &gt;&gt;&gt; def incr(x): return x + 1 &gt;&gt;&gt; # The above function can be invoked in two different ways. &gt;&gt;&gt; incr(x=1) 2 &gt;&gt;&gt; incr(1) 2 . | # Convert the above function to accept &#39;positional-only&#39; argument. # Default values for arguments can be provided. &gt;&gt;&gt; def incr(x=0, /): &gt;&gt;&gt; return x + 1 &gt;&gt;&gt; # This works. &gt;&gt;&gt; incr(1) 2 &gt;&gt;&gt; # This fails with an error. &gt;&gt;&gt; incr(x=1) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; incr(x=1) TypeError: incr() got some positional-only arguments passed as keyword arguments: &#39;x&#39; . | # Function signature allowing keyword-only argument &gt;&gt;&gt; def to_fahrenheit(*, celsius=0): &gt;&gt;&gt; return 32 + 9 * celsius / 5 &gt;&gt;&gt; # This works. &gt;&gt;&gt; to_fahrenheit(celsius=40) 104.0 &gt;&gt;&gt; # This won&#39;t. &gt;&gt;&gt; to_fahrenheit(40) File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; to_fahrenheit(40) TypeError: to_fahrenheit() takes 0 positional arguments but 1 was given . | # Function signature showing a combination of: # positional only, general, keyword only arguments &gt;&gt;&gt; def greet(name, /, greeting=&quot;Hi there&quot;, *, time_of_day=&quot;4:30pm&quot;): &gt;&gt;&gt; return f&quot;{greeting} {name}. It is {time_of_day} now!&quot; &gt;&gt;&gt; &gt;&gt;&gt; greet(&quot;Shashank&quot;, greeting=&quot;Hello&quot;, time_of_day=&quot;8:00&quot;) &#39;Hello Shashank. It is 8:00 now!&#39; &gt;&gt;&gt; greet(&quot;Shashank&quot;) &#39;Hi there Shashank. It is 4:30pm now!&#39; . | . | . 3. Advanced f-strings &amp; debug specifier . Assignment Expressions can be used inside a f-string &gt;&gt;&gt; r = 3.8 &gt;&gt;&gt; print(f&quot;Diameter {(diam := 2 * r)} gives circumference {math.pi * diam:.2f}&quot;) . | . | Specifier = enables self-documenting output . Prints the name of the variable in along with its value. . | # Here is how it works. &gt;&gt;&gt; x = 100 &gt;&gt;&gt; print(f&quot;{x=}) &#39;x=100&#39; . | . | . 4. Improvements to modules . asyncio.run() graduates to a stable API from a provisional one. | math gets new functions: prod(), isqrt(), dist() perm(), comb() | statistics gets fortified with new functions: fmean(), geometric_mean(), multimode(), quantiles(), NormalDist() | And several others‚Ä¶ | . 5. A new module: importlib.metadata . Helps with inspection of a package, its metadata, files, requirements, so on. . metadata.version(&#39;package&#39;) . &gt;&gt;&gt; from importlib import metadata &gt;&gt;&gt; metadata.version(&quot;bpython&quot;) &#39;0.21&#39; . | . | metadata.metadata(&#39;package&#39;) . &gt;&gt;&gt; from pprint import pprint &gt;&gt;&gt; pprint(dict(metadata.metadata(&quot;bpython&quot;))) {&#39;Author&#39;: &#39;Bob Farrell, Andreas Stuehrk, Sebastian Ramacher, Thomas &#39; &#39;Ballinger, et al.&#39;, &#39;Author-email&#39;: &#39;robertanthonyfarrell@gmail.com&#39;, &#39;Classifier&#39;: &#39;Programming Language :: Python :: 3&#39;, &#39;Home-page&#39;: &#39;https://www.bpython-interpreter.org/&#39;, &#39;License&#39;: &#39;MIT/X&#39;, &#39;Metadata-Version&#39;: &#39;2.1&#39;, &#39;Name&#39;: &#39;bpython&#39;, &#39;Platform&#39;: &#39;UNKNOWN&#39;, &#39;Provides-Extra&#39;: &#39;jedi&#39;, &#39;Requires-Dist&#39;: &#39;pygments&#39;, &#39;Requires-Python&#39;: &#39;&gt;=3.6&#39;, &#39;Summary&#39;: &#39;Fancy Interface to the Python Interpreter&#39;, &#39;Version&#39;: &#39;0.21&#39;} . | . | metadata.files(&#39;package&#39;)=&gt; returns list of Path() objects . &gt;&gt;&gt; len(metadata.files(&quot;bpython&quot;)) 153 . | . | metadata.requires(&#39;package&#39;) . &gt;&gt;&gt; pprint(metadata.requires(&quot;bpython&quot;)) [&#39;pygments&#39;, &#39;requests&#39;, &#39;curtsies (&gt;=0.3.5)&#39;, &#39;greenlet&#39;, &#39;cwcwidth&#39;, &#39;pyxdg&#39;, &quot;jedi (&gt;=0.16) ; extra == &#39;jedi&#39;&quot;, &quot;urwid ; extra == &#39;urwid&#39;&quot;, &quot;watchdog ; extra == &#39;watch&#39;&quot;] . | . | . 6. SyntaxWarning over dubious looking code . The difference between is and == can be confusing. The latter checks for equal values, while is is True only when objects are the same. Python 3.8 will try to warn you about cases when you should use == instead of is. . &gt;&gt;&gt; # Python 3.7 &gt;&gt;&gt; version = &quot;3.7&quot; &gt;&gt;&gt; version is &quot;3.7&quot; False &gt;&gt;&gt; &gt;&gt;&gt; # Python 3.8 &gt;&gt;&gt; version = &quot;3.8&quot; &gt;&gt;&gt; version is &quot;3.8&quot; &lt;stdin&gt;:1: SyntaxWarning: &quot;is&quot; with a literal. Did you mean &quot;==&quot;? False &gt;&gt;&gt; &gt;&gt;&gt; version == &quot;3.8&quot; True . | . | It is easy to miss a comma when you‚Äôre writing out a long list, especially when formatting it vertically. Forgetting a comma in a list of tuples will give a confusing error message about tuples not being callable. Python 3.8 additionally emits a warning that points toward the real issue. . &gt;&gt;&gt; [ ... (1, 2) ... (3, 4) ... ] &lt;stdin&gt;:2: SyntaxWarning: &#39;tuple&#39; object is not callable; perhaps you missed a comma? Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt; TypeError: &#39;tuple&#39; object is not callable . | . | . 7. Optimizations . As with every new point release, Python offers several runtime improvements with 3.8 as well. The salient ones are: . faster file copying with shutil functions | faster lookup of fields in namedtuple objects | faster operator.itemgetter operations | reduced memory footprint for lists, dictionaries | improved default performance in pickle (enabled by pickle protocol 5; see PEP 574) | . The comprehensive list of improvements is available at Python Official Website. . 8. More Precise Type Hinting Support . Type hinting is a formal solution to statically indicate the type of a variable within Python code. . Type hinting makes for an important subject. Dataclasses in Python Standard Library are built over type hinting. Several libraries in open source domain are taking advantage of this type hinting to build sophisticated capabilities (e.g., accurate code auto-completion in IDEs to improve developer productivity), and tools (data validation libraries e.g., Pydantic). Notable examples include: FastAPI - a highly scalable web application development framework; Typer - a modern command line application development framework. . PEP 484 specifies Python‚Äôs type hinting. Python 3.5 introduced language-level support for type hinting. . Please see this article to get started with python type hints. . Python 3.8 expands type hinting support to offer more precision, by adding support for the following: . Literal Types through PEP 586 | Typed Dictionaries through PEP 589 | Final Objects through PEP 591 | Protocol Definitions through PEP 544 | .",
            "url": "https://nsarathc.github.io/nscperfin/python/2021/09/14/py38_whatisnew.html",
            "relUrl": "/python/2021/09/14/py38_whatisnew.html",
            "date": " ‚Ä¢ Sep 14, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Thanks for stopping by! . My friends and colleagues know me as Sarath Chandra, and address me by the first name: Sarath. . By profession, I have been a Software Developer through a large part of my career spanning a couple of decades. By virtue of accumulated industry experience and product development knowledge, I am currently leading a product development team building a highly complex application system. . Personally, I believe I am a permanent student. I love to read a variety of topics - technology, problem solving methods, software architecture, system development, leadership, personal finance, business strategy, photography and current affairs (not necessarily in the same order). When I watch Television, that usually will be T-20 Cricket Match, or a similar sporting event. . I wanted to maintain my observations, learnings and other useful stuff in the form of a blog, and built this site using fastpages 1. I may not write a lot on my own, but promise myself to pick up and share helpful links to simplify a newbie programmer‚Äôs life (they are the ones that I spend a lot of my time with, so!). . a blogging platform that natively supports Jupyter notebooks, Markdown and .docx documents¬†&#8617; . |",
          "url": "https://nsarathc.github.io/nscperfin/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://nsarathc.github.io/nscperfin/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}